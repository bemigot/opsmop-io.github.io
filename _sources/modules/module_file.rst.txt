.. image:: ../opsmop.png
   :alt: OpsMop Logo

.. THIS FILE IS AUTOMATICALLY GENERATED
..
 .. Please do not send pull requests for this file directly.
.. If you wish to update these examples send a pull request here:
..
 .. https://github.com/opsmop/opsmop-demo/blob/master/module_docs/file.py
..
.. This comment only applies to the module documentation

.. _module_file:

File Module
===========

The File module handles all major types of file operations in OpsMop.


.. list-table:: Module Parameters
    :header-rows: 1

    * - Name
      - Help
      - Kind
      - Default
    * - absent
      - if true, delete the file/directory
      - bool
      - False
    * - from_content
      - use this string as source data instead of a file
      - str
      - None
    * - from_file
      - path to a source file
      - str
      - None
    * - from_template
      - path to a source Jinja2 template
      - str
      - None
    * - group
      - group name
      - str
      - None
    * - mode
      - file mode, in hex/octal (not a string)
      - int
      - None
    * - name
      - path to the destination file
      - str
      - None
    * - overwrite
      - replace existing files
      - bool
      - True
    * - owner
      - owner name
      - str
      - None


.. list-table:: Common Parameters
    :header-rows: 1

    * - Name
      - Help
      - Kind
      - Default
    * - ignore_errors
      - proceeds in the event of most error conditions
      - bool
      - False
    * - method
      - selects a non-default provider by name
      - str
      - None
    * - register
      - saves the resource result into a named variable
      - str
      - None
    * - signals
      - signals a handler event by name
      - list
      - None
    * - tags
      - allows applying part of the policy
      - list
      - None
    * - when
      - attaches a condition to this resource
      - any
      - None



Example: Template
-----------------


Templating a file from a jinja2 template

See the official `Jinja2 documentation <http://jinja.pocoo.org/docs>`_ for full capabilities
of Jinja2 templates

.. code-block:: python

    
    class Jinja2TemplateExample(Role):
    
        def set_variables(self):
            return dict(a=1, b=5150, c="badwolf")
    
        def set_resources(self):
            return Resources(
                # for template language and variable scoping information, please consult the language docs
                Debug(),
                File(name="/tmp/opsmop-demo/foo1.txt", from_template="templates/foo.txt.j2"),
                Shell("cat /tmp/opsmop-demo/foo1.txt")
            )
    
    

Example: Copy
-------------


Copying a file with owner, permission, and mode

.. code-block:: python

    
    class CopyExample(Role):
    
        def set_resources(self):
            return Resources(
                 # owner/group/mode can be used with any of these forms, just showing one example here
                 File(name="/tmp/opsmop-demo/foo2.txt", from_file="files/foo.txt", owner=USERNAME, mode=0x755),
                 Shell("cat /tmp/opsmop-demo/foo2.txt")
            )
    

Example: Copy From String
-------------------------


For very small files, this is also possible

.. code-block:: python

    
    class ContentExample(Role):
    
        def set_variables(self):
            return dict(a=2, b=2112, c="darmok")
    
        def set_resources(self):
            return Resources(
                 Debug(),
                 File(name="/tmp/opsmop-demo/foo3.txt", from_content="Happy Birthday"),
                 Shell("cat /tmp/opsmop-demo/foo3.txt"),
                 File(name="/tmp/opsmop-demo/foo4.txt", from_content=T("Template test! a={{ a}}")),
                 Shell("cat /tmp/opsmop-demo/foo4.txt")
            )
    

Example: Deleting a File
------------------------


Ensure that a file does not exist

.. code-block:: python

    
    class AbsentExample(Role):
    
        def set_resources(self):
            return Resources(
                 File(name="/tmp/opsmop-demo/foo4.txt", absent=True),
                 Shell("ls /tmp/opsmop-demo/foo4.txt", ignore_errors=True),
                 # the file is already deleted so this next step is a no-op
                 File(name="/tmp/opsmop-demo/foo4.txt", absent=True),
            )
    
    

Demo On GitHub
--------------
* `file.py <https://github.com/opsmop/opsmop-demo/blob/master/module_docs/file.py>`_

Type Implementations
--------------------
* `opsmop.types.file <https://github.com/opsmop/opsmop/tree/master/opsmop/types/file.py>`_

Provider Implementations
------------------------
* `opsmop.providers.file <https://github.com/opsmop/opsmop/tree/master/opsmop/providers/file.py>`_

Related Modules
---------------
* :ref:`module_directory`

See Also
--------
* :ref:`language`
* :ref:`advanced`
* :ref:`development`


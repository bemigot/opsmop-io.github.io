.. image:: ../opsmop.png
   :alt: OpsMop Logo

.. THIS FILE IS AUTOMATICALLY GENERATED
..
 .. Please do not send pull requests for this file directly.
.. If you wish to update these examples send a pull request here:
..
 .. https://github.com/opsmop/opsmop-demo/blob/master/module_docs/shell.py
..
.. This comment only applies to the module documentation

.. _module_shell:

Shell Module
============

The Shell module runs arbitrary shell commands. It is frequently used with template
expressions "T()" to pass variables in for execution.


.. list-table:: Module Parameters
    :header-rows: 1

    * - Name
      - Help
      - Kind
      - Default
    * - cmd
      - execute this shell code in the default shell
      - str
      - None
    * - timeout
      - max time to allow this command to run
      - int
      - 99999


.. list-table:: Common Parameters
    :header-rows: 1

    * - Name
      - Help
      - Kind
      - Default
    * - failed_when
      - if set, specify terms of resource application failure
      - any
      - None
    * - ignore_errors
      - proceeds in the event of most error conditions
      - bool
      - False
    * - method
      - selects a non-default provider by name
      - str
      - None
    * - register
      - saves the resource result into a named variable
      - str
      - None
    * - signals
      - signals a handler event by name
      - list
      - None
    * - tags
      - allows applying part of the policy
      - list
      - None
    * - when
      - attaches a condition to this resource
      - any
      - None



Example: Basic Example
----------------------


Here are various passing asserts and finally one that will end the execution
of this policy with an error.

.. code-block:: python

    
    class BasicExample(Role):
    
        def set_variables(self):
            return dict(a=1, b=5150, c="badwolf")
    
        def set_resources(self):
    
            return Resources(
    
                # here is an example of running a command and saving the output and return code
                Shell("date | cut -f1 -d ' '", register='date'),
                Echo("today is {{ date.data }} and the return code was {{ date.rc }}"),
    
                # you can ignore return codes like this
                Shell("/bin/false", ignore_errors=True),
    
                # or like this - soon
                # Shell("/bin/false", failed_when=Eval('a > b')),
    
                # you can use variables in shell commands like this:
                Shell(T("echo {{ a }} {{ b }} {{ c }}")),
    
            )
    

Demo On GitHub
--------------
* `shell.py <https://github.com/opsmop/opsmop-demo/blob/master/module_docs/shell.py>`_

Type Implementations
--------------------
* `opsmop.types.shell <https://github.com/opsmop/opsmop/tree/master/opsmop/types/shell.py>`_

Provider Implementations
------------------------
* `opsmop.providers.shell <https://github.com/opsmop/opsmop/tree/master/opsmop/providers/shell.py>`_

Related Modules
---------------
* :ref:`module_file`
* :ref:`module_package`
* :ref:`module_service`
* :ref:`module_set`

See Also
--------
* :ref:`language`
* :ref:`advanced`
* :ref:`development`


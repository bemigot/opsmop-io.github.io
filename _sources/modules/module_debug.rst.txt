.. image:: ../opsmop.png
   :alt: OpsMop Logo

.. THIS FILE IS AUTOMATICALLY GENERATED
..
 .. Please do not send pull requests for this file directly.
.. If you wish to update these examples send a pull request here:
..
 .. https://github.com/vespene-io/opsmop-demo/blob/master/module_docs/debug.py
..
.. This comment only applies to the module documentation

.. _module_debug:

Debug Module
============

The Debug module is a powerful way to figure out what the value of a variable
is at runtime inside OpsMop.


.. list-table:: Module Parameters
    :header-rows: 1

    * - Name
      - Help
      - Kind
      - Default
    * - evals
      - 
      - dict
      - None
    * - variable_names
      - 
      - list
      - None


.. list-table:: Common Parameters
    :header-rows: 1

    * - Name
      - Help
      - Kind
      - Default
    * - ignore_errors
      - proceeds in the event of most error conditions
      - bool
      - False
    * - method
      - selects a non-default provider by name
      - str
      - None
    * - register
      - saves the resource result into a named variable
      - str
      - None
    * - signals
      - signals a handler event by name
      - list
      - None
    * - when
      - attaches a condition to this resource
      - any
      - None



Example: Basic Example
----------------------


Here's a really easy way to see what the values of some variables are

.. code-block:: python

    
    class BasicExample(Role):
    
        def set_variables(self):
            return dict(a=1, b=5150, c="badwolf")
    
        def set_resources(self):
            return Resources(
                Set(d=1234),
                # show everything in variable memory for this scope
                Debug(),
                # just show some things
                Debug('a', 'b', 'c'),
                # also debug some evaluated results or Facts
                Debug('a', 'b', 'c', os_type=Facts.os_type(), expr=Eval('a + 1000'))
            )
    
    

Type Implementations
--------------------
* `opsmop.types.debug <https://github.com/vespene-io/opsmop/tree/master/opsmop/types/debug.py>`_

Provider Implementations
------------------------
* `opsmop.providers.debug <https://github.com/vespene-io/opsmop/tree/master/opsmop/providers/debug.py>`_

Related Modules
---------------
* :ref:`module_asserts`
* :ref:`module_echo`
* :ref:`module_set`

See Also
--------
* :ref:`language`
* :ref:`advanced`
* :ref:`development`

